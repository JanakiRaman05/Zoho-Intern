// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: version.proto

#include "version.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR version_detail::version_detail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.change_)*/{}
  , /*decltype(_impl_._change_cached_byte_size_)*/{0}
  , /*decltype(_impl_.line_number_)*/{}
  , /*decltype(_impl_._line_number_cached_byte_size_)*/{0}
  , /*decltype(_impl_.line_change_)*/{}
  , /*decltype(_impl_.change_time_)*/{}
  , /*decltype(_impl_.proj_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct version_detailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR version_detailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~version_detailDefaultTypeInternal() {}
  union {
    version_detail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 version_detailDefaultTypeInternal _version_detail_default_instance_;
static ::_pb::Metadata file_level_metadata_version_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_version_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_version_2eproto = nullptr;

const uint32_t TableStruct_version_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::version_detail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::version_detail, _impl_.proj_id_),
  PROTOBUF_FIELD_OFFSET(::version_detail, _impl_.change_),
  PROTOBUF_FIELD_OFFSET(::version_detail, _impl_.line_number_),
  PROTOBUF_FIELD_OFFSET(::version_detail, _impl_.line_change_),
  PROTOBUF_FIELD_OFFSET(::version_detail, _impl_.change_time_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::version_detail)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_version_detail_default_instance_._instance,
};

const char descriptor_table_protodef_version_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rversion.proto\"p\n\016version_detail\022\017\n\007pro"
  "j_id\030\005 \001(\t\022\016\n\006change\030\002 \003(\005\022\023\n\013line_numbe"
  "r\030\003 \003(\005\022\023\n\013line_change\030\004 \003(\t\022\023\n\013change_t"
  "ime\030\006 \003(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_version_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_version_2eproto = {
    false, false, 137, descriptor_table_protodef_version_2eproto,
    "version.proto",
    &descriptor_table_version_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_version_2eproto::offsets,
    file_level_metadata_version_2eproto, file_level_enum_descriptors_version_2eproto,
    file_level_service_descriptors_version_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_version_2eproto_getter() {
  return &descriptor_table_version_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_version_2eproto(&descriptor_table_version_2eproto);

// ===================================================================

class version_detail::_Internal {
 public:
};

version_detail::version_detail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:version_detail)
}
version_detail::version_detail(const version_detail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  version_detail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.change_){from._impl_.change_}
    , /*decltype(_impl_._change_cached_byte_size_)*/{0}
    , decltype(_impl_.line_number_){from._impl_.line_number_}
    , /*decltype(_impl_._line_number_cached_byte_size_)*/{0}
    , decltype(_impl_.line_change_){from._impl_.line_change_}
    , decltype(_impl_.change_time_){from._impl_.change_time_}
    , decltype(_impl_.proj_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proj_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proj_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proj_id().empty()) {
    _this->_impl_.proj_id_.Set(from._internal_proj_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:version_detail)
}

inline void version_detail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.change_){arena}
    , /*decltype(_impl_._change_cached_byte_size_)*/{0}
    , decltype(_impl_.line_number_){arena}
    , /*decltype(_impl_._line_number_cached_byte_size_)*/{0}
    , decltype(_impl_.line_change_){arena}
    , decltype(_impl_.change_time_){arena}
    , decltype(_impl_.proj_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.proj_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proj_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

version_detail::~version_detail() {
  // @@protoc_insertion_point(destructor:version_detail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void version_detail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.change_.~RepeatedField();
  _impl_.line_number_.~RepeatedField();
  _impl_.line_change_.~RepeatedPtrField();
  _impl_.change_time_.~RepeatedPtrField();
  _impl_.proj_id_.Destroy();
}

void version_detail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void version_detail::Clear() {
// @@protoc_insertion_point(message_clear_start:version_detail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.change_.Clear();
  _impl_.line_number_.Clear();
  _impl_.line_change_.Clear();
  _impl_.change_time_.Clear();
  _impl_.proj_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* version_detail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_change(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_change(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 line_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_line_number(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_line_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string line_change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_line_change();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "version_detail.line_change"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string proj_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_proj_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "version_detail.proj_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string change_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_change_time();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "version_detail.change_time"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* version_detail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:version_detail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 change = 2;
  {
    int byte_size = _impl_._change_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_change(), byte_size, target);
    }
  }

  // repeated int32 line_number = 3;
  {
    int byte_size = _impl_._line_number_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_line_number(), byte_size, target);
    }
  }

  // repeated string line_change = 4;
  for (int i = 0, n = this->_internal_line_change_size(); i < n; i++) {
    const auto& s = this->_internal_line_change(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "version_detail.line_change");
    target = stream->WriteString(4, s, target);
  }

  // string proj_id = 5;
  if (!this->_internal_proj_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proj_id().data(), static_cast<int>(this->_internal_proj_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "version_detail.proj_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_proj_id(), target);
  }

  // repeated string change_time = 6;
  for (int i = 0, n = this->_internal_change_time_size(); i < n; i++) {
    const auto& s = this->_internal_change_time(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "version_detail.change_time");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:version_detail)
  return target;
}

size_t version_detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:version_detail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 change = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.change_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._change_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 line_number = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.line_number_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._line_number_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string line_change = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.line_change_.size());
  for (int i = 0, n = _impl_.line_change_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.line_change_.Get(i));
  }

  // repeated string change_time = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.change_time_.size());
  for (int i = 0, n = _impl_.change_time_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.change_time_.Get(i));
  }

  // string proj_id = 5;
  if (!this->_internal_proj_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proj_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData version_detail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    version_detail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*version_detail::GetClassData() const { return &_class_data_; }


void version_detail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<version_detail*>(&to_msg);
  auto& from = static_cast<const version_detail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:version_detail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.change_.MergeFrom(from._impl_.change_);
  _this->_impl_.line_number_.MergeFrom(from._impl_.line_number_);
  _this->_impl_.line_change_.MergeFrom(from._impl_.line_change_);
  _this->_impl_.change_time_.MergeFrom(from._impl_.change_time_);
  if (!from._internal_proj_id().empty()) {
    _this->_internal_set_proj_id(from._internal_proj_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void version_detail::CopyFrom(const version_detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:version_detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool version_detail::IsInitialized() const {
  return true;
}

void version_detail::InternalSwap(version_detail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.change_.InternalSwap(&other->_impl_.change_);
  _impl_.line_number_.InternalSwap(&other->_impl_.line_number_);
  _impl_.line_change_.InternalSwap(&other->_impl_.line_change_);
  _impl_.change_time_.InternalSwap(&other->_impl_.change_time_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proj_id_, lhs_arena,
      &other->_impl_.proj_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata version_detail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_version_2eproto_getter, &descriptor_table_version_2eproto_once,
      file_level_metadata_version_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::version_detail*
Arena::CreateMaybeMessage< ::version_detail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::version_detail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
